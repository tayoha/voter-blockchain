// const Web3 = require('web3')
const web3 = new Web3(new Web3.providers.HttpProvider('http://127.0.0.1:7545'))
// const { abi } = require('../build/contracts/Registration.json');
const transactionType = {
  CREATE: 0,
  UPDATE: 1,
  DELETE: 2
}

// TODO: deploy should take arguments from the front-end, i.e. deploy(name, dob, ...)
const deploy = async () => {
  const raw = await $.getJSON('Registration.json')
  const abi = raw["abi"]
  const accounts = await web3.eth.getAccounts();
  const first_name = document.getElementById('first-name').value
  const middle_name = document.getElementById('middle-name').value
  const last_name = document.getElementById('last-name').value
  const dob = document.getElementById('dob').value
  const address = document.getElementById('mailing-address-1').value + ' ' + document.getElementById('mailing-address-2').value + ' ' + document.getElementById('city').value + ', '
  + document.getElementById('state').value + ' ' + document.getElementById('zip').value
  const party = document.getElementById('party').value 
  const ident = document.getElementById('ssn').value
  var hash = sha3_256.create();
  hash.update(ident)
  hash.update('30458340')
  const hashed_ident = hash.hex()
  // Contract address needs to be updated every call to migration
  await new web3.eth.Contract(abi, '0x800314CAc54e3039cda58fb209cc36034232BC8a')
    .methods
    .createVoter(
      true,
      first_name + ' ' + middle_name + ' ' + last_name,
      dob,
      address,
      party,
      transactionType.CREATE,
      Date.now(),
      hashed_ident,
      'ssn'
      )
    .send({ 'from': accounts[0], 'gas': '1000000' });
    window.location.reload(true);
};

// deploy()

/* let Tx = require('ethereumjs-tx').Transaction
web3.eth.getTransactionCount(account1, (err, txCount) => {
  // smart contract data
  const data = '0x60806040526000805534801561001457600080fd5b50610a46806100246000396000f3fe6080604052600436106100565763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166342169e48811461005b57806369e024e414610082578063da58c7d91461035c575b600080fd5b34801561006757600080fd5b506100706105a1565b60408051918252519081900360200190f35b34801561008e57600080fd5b5061035a600480360360c08110156100a557600080fd5b8135151591908101906040810160208201356401000000008111156100c957600080fd5b8201836020820111156100db57600080fd5b803590602001918460018302840111640100000000831117156100fd57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561015057600080fd5b82018360208201111561016257600080fd5b8035906020019184600183028401116401000000008311171561018457600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092959493602081019350359150506401000000008111156101d757600080fd5b8201836020820111156101e957600080fd5b8035906020019184600183028401116401000000008311171561020b57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561025e57600080fd5b82018360208201111561027057600080fd5b8035906020019184600183028401116401000000008311171561029257600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092959493602081019350359150506401000000008111156102e557600080fd5b8201836020820111156102f757600080fd5b8035906020019184600183028401116401000000008311171561031957600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506105a7945050505050565b005b34801561036857600080fd5b506103866004803603602081101561037f57600080fd5b5035610690565b6040518087151515158152602001806020018060200180602001806020018060200186810386528b818151815260200191508051906020019080838360005b838110156103dd5781810151838201526020016103c5565b50505050905090810190601f16801561040a5780820380516001836020036101000a031916815260200191505b5086810385528a5181528a516020918201918c019080838360005b8381101561043d578181015183820152602001610425565b50505050905090810190601f16801561046a5780820380516001836020036101000a031916815260200191505b5086810384528951815289516020918201918b019080838360005b8381101561049d578181015183820152602001610485565b50505050905090810190601f1680156104ca5780820380516001836020036101000a031916815260200191505b5086810383528851815288516020918201918a019080838360005b838110156104fd5781810151838201526020016104e5565b50505050905090810190601f16801561052a5780820380516001836020036101000a031916815260200191505b50868103825287518152875160209182019189019080838360005b8381101561055d578181015183820152602001610545565b50505050905090810190601f16801561058a5780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060405180910390f35b60005481565b6000805460019081018083556040805160c0810182528a1515815260208082018b81528284018b9052606083018a90526080830189905260a08301889052938652848152919094208451815460ff19169015151781559151805192936106159390850192919091019061097f565b506040820151805161063191600284019160209091019061097f565b506060820151805161064d91600384019160209091019061097f565b506080820151805161066991600484019160209091019061097f565b5060a0820151805161068591600584019160209091019061097f565b505050505050505050565b600160208181526000928352604092839020805481840180548651600261010097831615979097026000190190911695909504601f810185900485028601850190965285855260ff909116949193929091908301828280156107335780601f1061070857610100808354040283529160200191610733565b820191906000526020600020905b81548152906001019060200180831161071657829003601f168201915b50505060028085018054604080516020601f60001961010060018716150201909416959095049283018590048502810185019091528181529596959450909250908301828280156107c55780601f1061079a576101008083540402835291602001916107c5565b820191906000526020600020905b8154815290600101906020018083116107a857829003601f168201915b5050505060038301805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529495949350908301828280156108555780601f1061082a57610100808354040283529160200191610855565b820191906000526020600020905b81548152906001019060200180831161083857829003601f168201915b5050505060048301805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529495949350908301828280156108e55780601f106108ba576101008083540402835291602001916108e5565b820191906000526020600020905b8154815290600101906020018083116108c857829003601f168201915b5050505060058301805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529495949350908301828280156109755780601f1061094a57610100808354040283529160200191610975565b820191906000526020600020905b81548152906001019060200180831161095857829003601f168201915b5050505050905086565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106109c057805160ff19168380011785556109ed565b828001600101855582156109ed579182015b828111156109ed5782518255916020019190600101906109d2565b506109f99291506109fd565b5090565b610a1791905b808211156109f95760008155600101610a03565b9056fea165627a7a72305820c41a8ceb7c2934dd9b23294c551ba7cb05db8751d028337877e9c5946ef9ac6e0029'

  // create transaction object
  const txObject = {
    nonce: web3.utils.toHex(txCount),
    gasLimit: web3.utils.toHex(1000000),
    gasPrice: web3.utils.toHex(web3.utils.toWei('10', 'gwei')),
    data: data
  }

  // sign the transaction
  const tx = new Tx(txObject)
  tx.sign(privateKey)

  const serializedTx = tx.serialize()
  const raw = '0x' + serializedTx.toString('hex')

  // broadcast the transaction
  web3.eth.sendSignedTransaction(raw, (err, txHash) => {
    console.log('err: ', err, 'txHash:', txHash)
  })
}) */